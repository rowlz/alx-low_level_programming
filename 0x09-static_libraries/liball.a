!<arch>
0-isupper.c/    0           0     0     644     249       `
#include "main.h"
#include <stdio.h>

/**
 * _isupper - returms 0 or 1 if upper
 * @c: input
 * Return: 0 or 1
*/

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else if (c >= 97 && c <= 122)
	{
		return (0);
	}

	return (0);
}

0-memset.c/     0           0     0     644     276       `
#include "main.h"

/**
 * _memset - Fills mem with a byte
 * @s: buffer
 * @b: constant
 * @n: number of times of constant
 * Return: pointer
 */

char *_memset(char *s, char b, unsigned int n)
{
	int i;

	i = 0;
	while (n > 0)
	{
		s[i] = b;
		n--;
		i++;
	}

	return (s);
}
0-strcat.c/     0           0     0     644     335       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * *_strcat - concat two strings
 * @dest: 1
 * @src: 2
 * Return: 0
*/

char *_strcat(char *dest, char *src)
{
	int a, b;

	for (a = 0; dest[a] != '\0'; a++)
	{
		;
	}
	for (b = 0; src[b] != '\0'; b++)
	{
		dest[a] = src[b];
		a++;
	}

	dest[a] = '\0';
	return (dest);

}

100-atoi.c/     0           0     0     644     155       `
#include "main.h"

/**
 * _atoi - convert
 * @s: char
 * Description: number in nstring
 * Return: the first int
 */

int _atoi(char *s)
{
	return (*s);
}

1-isdigit.c/    0           0     0     644     299       `
#include "main.h"
#include <stdio.h>

/**
 * _isdigit - returms 0 or 1 if upper
 * @c: input
 * Return: 0 or 1
*/

int _isdigit(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (0);
	}
	else if (c >= 97 && c <= 122)
	{
		return (0);
	}
	else if (c >= 48 && c <= 57)
	{
		return (1);
	}

	return (0);
}

1-memcpy.c/     0           0     0     644     293       `
#include "main.h"

/**
 * _memcpy - Copy mem
 * @dest: char array to copy insinde
 * @src:  char array to copy from
 * @n: size
 * Return: update dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];

	return (dest);
}

1-strncat.c/    0           0     0     644     362       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * *_strncat - concat two strings
 * @dest: 1
 * @src: 2
 * @n: 3
 * Return: 0
*/

char *_strncat(char *dest, char *src, int n)
{
	int a, b;

	for (a = 0; dest[a] != '\0'; a++)
	{
		;
	}
	for (b = 0; b < n && src[b] != '\0'; b++)
	{
		dest[a] = src[b];
		a++;
	}

	dest[a] = '\0';
	return (dest);

}
2-strchr.c/     0           0     0     644     332       `
#include "main.h"

/**
 * _strchr - Searches for string
 * @s: th string that will searched
 * @c: the character to be found in string
 * Return: the character found
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		s++;
		if (*s == c)
			return (s);
		else if (*(s + 1) == c)
			return (s + 1);
	}
	return (s + 1);

}
2-strlen.c/     0           0     0     644     228       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * _strlen - swaps values of two integers
 * @s: string
 * Return: Always 0
*/

int _strlen(char *s)
{
	int a;

	for (a = 0; s[a] != '\0'; ++a)
	{

	}
	return (a);
}
2-strncpy.c/    0           0     0     644     329       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * *_strncpy - concat two strings
 * @dest: 1
 * @src: 2
 * @n: 3
 * Return: 0
*/

char *_strncpy(char *dest, char *src, int n)
{
	int a;

	for (a = 0; a < n && src[a] != '\0'; a++)
	{
		dest[a] = src[a];
	}
	for (; a < n; a++)
		dest[a] = '\0';

	return (dest);


}

3-islower.c/    0           0     0     644     283       `
#include <unistd.h>
#include "main.h"

/**
 * _islower - The start of program
 * @c: input
 * Description : prints out the alphabet in lower case
 * Return: 1 if lower case, 0 is upper
*/

int _islower(int c)
{
	if (c > 97 && c < 123)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     190       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * _puts - swaps values of two integers
 * @str: string
 * Return: Always 0
*/

void _puts(char *str)
{
	printf("%s\n", str);
}
3-strcmp.c/     0           0     0     644     296       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * _strcmp - concat two strings
 * @s1: 1
 * @s2: 2
 * Return: 0
*/

int _strcmp(char *s1, char *s2)
{
	int a;

	for (a = 0; s1[a] != '\0' || s2[a] != '\0'; a++)
	{
		if (s1[a] != s2[a])
			return (s1[a] - s2[a]);
	}
	return (0);


}
3-strspn.c/     0           0     0     644     415       `
#include "main.h"

/**
 * _strspn - Searches for byte
 * @s: char string array
 * @accept: array to check the byte
 * Return: the bytes
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j, k;

	i = 0;
	k = 0;

	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
			{
				k++;
				break;

			}
			j++;
		}
		if (accept[j] == '\0')
			break;
		i++;
	}
	return (k);

}

4-isalpha.c/    0           0     0     644     324       `
#include <unistd.h>
#include "main.h"

/**
 * _isalpha - The start of program
 * @c: input
 * Description : prints out the alphabet in lower case
 * Return: 1 if lower upper case or letter, 0 otherwise
*/

int _isalpha(int c)
{
	if ((c > 96 && c < 123) || (c > 64 && c < 91))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     371       `
#include "main.h"

/**
 * _strpbrk - Searches forstring of a byte
 * @s: str
 * @accept: string match
 * Return: the pointer
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j;
	char *p;

	i = 0;
	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j] != '\0')
		{
			if (accept[j] == s[i])
			{
				p = &s[i];
				return (p);
			}
			j++;
		}
		i++;
	}

	return (0);
}

5-strstr.c/     0           0     0     644     550       `
#include "main.h"
#include <stdlib.h>

/**
 * _strstr - locate a substring
 * @haystack: string
 * @needle: string substring
 * Return: pointer to beg of str null if not
 */

char *_strstr(char *haystack, char *needle)
{
	int i, j, k;

	i = 0;
	k = 0;
	while (haystack[i] != '\0')
	{
		j = 0;
		while (needle[j + k] != '\0' && haystack[i + k] != '\0'
			&& needle[j + k] == haystack[i + k])
		{
			if (haystack[i + k] != needle[j + k])
				break;
			k++;
		}
		if (needle[j + k] == '\0')
			return (&haystack[i]);
		j++;
		i++;
	}

	return (NULL);
}
6-abs.c/        0           0     0     644     372       `
#include <unistd.h>
#include "main.h"

/**
 * _abs - The start of program
 * @n: input
 * Description : prints out the alphabet in lower case
 * Return: 1 and print '+'if n greater than zero
 * 0 and print '0' if zero
 * -1 and prints '-' if less than zero
*/

int _abs(int n)
{

	if (n >= 0)
	{
		return (n);
	}
	else if (n < 0)
	{
		return (n * -1);
	}

	return (0);

}
9-strcpy.c/     0           0     0     644     306       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * *_strcpy - swaps values of two integers
 * @dest: string
 * @src: nmber
 * Return: Always 0
*/

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	dest[i] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}

